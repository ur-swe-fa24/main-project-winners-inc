@startuml

' User Management Classes
class User {
    - id: int
    - name: string
    - role: Role
    --
    + User(id: int, name: string, role: Role)
    + login()
    + logout()
    + receiveNotification(alert: Alert)
    + getId(): int
    + getName(): string
    + getRole(): Role
}

class Role {
    - name: string
    - permissions: vector<Permission>
    --
    + Role(name: string)
    + addPermission(permission: Permission)
    + hasPermission(permissionName: string): bool
    + getName(): string
}

class Permission {
    - name: string
    --
    + Permission(name: string)
    + getName(): string
}

' Alert System Classes
class Alert {
    - type: string
    - message: string
    - robot: shared_ptr<Robot>
    - room: shared_ptr<Room>
    - timestamp: time_t
    - severity: Severity
    --
    + Alert(type: string, message: string, robot: Robot, room: Room, timestamp: time_t)
    + getTitle(): string
    + getMessage(): string
    + getRobot(): shared_ptr<Robot>
    + getRoom(): shared_ptr<Room>
    + displayAlertInfo()
}

class AlertSystem {
    - alertQueue_: queue<pair<User*, shared_ptr<Alert>>>
    - workerThread_: thread
    - queueMutex_: mutex
    - cv_: condition_variable
    - running_: atomic<bool>
    --
    + AlertSystem()
    + ~AlertSystem()
    + sendAlert(user: User*, alert: shared_ptr<Alert>)
    + stop()
    - processAlerts()
}

' Robot and Room Classes
class Robot {
    - name: string
    - batteryLevel: int
    --
    + Robot(name: string, batteryLevel: int)
    + sendStatusUpdate()
    + recharge()
    + needsMaintenance(): bool
    + depleteBattery(amount: int)
    + getName(): string
    + getBatteryLevel(): int
}

class Room {
    - roomName: string
    - roomId: int
    - occupied: bool
    --
    + Room(roomName: string, roomId: int)
    + getRoomInfo()
    + isOccupied(): bool
    + getRoomName(): string
    + getRoomId(): int
}

' Database Adapter
class MongoDBAdapter {
    - dbName_: string
    - saveQueue_: queue<Alert>
    - robotStatusQueue_: queue<shared_ptr<Robot>>
    - dbThread_: thread
    - robotStatusThread_: thread
    - queueMutex_: mutex
    - cv_: condition_variable
    - running_: atomic<bool>
    --
    + MongoDBAdapter(uri: string, dbName: string)
    + ~MongoDBAdapter()
    + saveAlert(alert: Alert)
    + retrieveAlerts(): vector<Alert>
    + saveRobotStatusAsync(robot: shared_ptr<Robot>)
    + retrieveRobotStatuses(): vector<shared_ptr<Robot>>
    + deleteAllAlerts()
    + deleteAllRobotStatuses()
    + stop()
}

' Relationships
User o-> Role
Role o-> "0..*" Permission

AlertSystem ..> User : sends alerts to
AlertSystem o-> Alert : manages
Alert o-> Robot : references
Alert o-> Room : references

MongoDBAdapter ..> Alert : stores
MongoDBAdapter ..> Robot : stores status

@enduml