@startuml

' Core Classes
class User {
    - id: int
    - name: string
    - role: Role
    --
    + User(id: int, name: string, role: Role)
    + login()
    + logout()
    + receiveNotification(alert: Alert)
    + getId(): int
    + getName(): string
    + getRole(): Role
}

class Role {
    - name: string
    - permissions: vector<Permission>
    --
    + Role(name: string)
    + addPermission(permission: Permission)
    + hasPermission(permissionName: string): bool
    + getName(): string
    + setName(name: string)
}

class Permission {
    - name: string
    --
    + Permission(name: string)
    + getName(): string
}

' Alert System Classes
class Alert {
    - title: string
    - description: string
    - robot: shared_ptr<Robot>
    - room: shared_ptr<Room>
    - timestamp: time_t
    --
    + Alert(title: string, description: string, robot: Robot, room: Room, timestamp: time_t)
    + getTitle(): string
    + getDescription(): string
    + getRobot(): shared_ptr<Robot>
    + getRoom(): shared_ptr<Room>
    + getTimestamp(): time_t
    + displayAlertInfo()
}

class AlertSystem {
    - alertQueue_: queue<pair<User*, shared_ptr<Alert>>>
    - workerThread_: thread
    - queueMutex_: mutex
    - cv_: condition_variable
    - running_: atomic<bool>
    --
    + AlertSystem()
    + ~AlertSystem()
    + sendAlert(user: User*, alert: shared_ptr<Alert>)
    + stop()
    - processAlerts()
}

' Robot and Room Classes
class Robot {
    - name: string
    - batteryLevel: int
    - currentMap: Map*
    --
    + Robot(name: string, batteryLevel: int)
    + sendStatusUpdate()
    + recharge()
    + needsMaintenance(): bool
    + depleteBattery(amount: int)
    + getName(): string
    + getBatteryLevel(): int
    + setMap(map: Map*)
    + getMap(): Map*
}

class Room {
    - roomName: string
    - roomId: int
    - occupied: bool
    --
    + Room(roomName: string, roomId: int)
    + getRoomInfo()
    + isOccupied(): bool
    + getRoomName(): string
    + getRoomId(): int
    + setRoomName(newRoomName: string)
}

' Database Adapter
class MongoDBAdapter {
    - dbName_: string
    - saveQueue_: queue<Alert>
    - robotStatusQueue_: queue<shared_ptr<Robot>>
    - dbThread_: thread
    - robotStatusThread_: thread
    - queueMutex_: mutex
    - cv_: condition_variable
    - running_: atomic<bool>
    --
    + MongoDBAdapter(uri: string, dbName: string)
    + saveAlert(alert: Alert)
    + saveAlertAsync(alert: Alert)
    + saveRobotStatus(robot: shared_ptr<Robot>)
    + saveRobotStatusAsync(robot: shared_ptr<Robot>)
    + retrieveAlerts(): vector<Alert>
    + retrieveRobotStatuses(): vector<shared_ptr<Robot>>
    + deleteAllAlerts()
    + deleteAllRobotStatuses()
    + dropAlertCollection()
    + dropRobotStatusCollection()
    + stop()
    + stopRobotStatusThread()
    - processSaveQueue()
    - processRobotStatusQueue()
}

' Analytics Classes
class Analytics {
    - metrics: vector<RobotMetrics>
    --
    + addMetrics(metrics: RobotMetrics)
    + generateReport(): string
}

class AnalyticsService {
    - analytics: Analytics
    --
    + processMetrics(metrics: RobotMetrics)
    + getReport(): string
}

class RobotMetrics {
    - utilization: float
    - errorRate: float
    - costEfficiency: float
    - timeEfficiency: float
    - batteryUsage: float
    - waterUsage: float
    --
    + RobotMetrics(utilization: float, errorRate: float, costEfficiency: float,
                  timeEfficiency: float, batteryUsage: float, waterUsage: float)
    + getUtilization(): float
    + getErrorRate(): float
    + getCostEfficiency(): float
    + getTimeEfficiency(): float
    + getBatteryUsage(): float
    + getWaterUsage(): float
}

' UI Classes
class RobotManagementFrame {
    - robotList: vector<Robot*>
    - currentUser: User*
    - mapPanel: MapPanel*
    --
    + RobotManagementFrame()
    + addRobot(robot: Robot*)
    + removeRobot(robot: Robot*)
    + updateRobotStatus(robot: Robot*)
    + showLoginDialog()
    + showAlertDialog(alert: Alert*)
}

class MapPanel {
    - map: Map*
    - robots: vector<Robot*>
    --
    + MapPanel(parent: wxWindow*)
    + updateRobotPosition(robot: Robot*, x: int, y: int)
    + drawMap()
    + drawRobots()
}

class LoginDialog {
    - usernameCtrl: wxTextCtrl*
    - passwordCtrl: wxTextCtrl*
    --
    + LoginDialog(parent: wxWindow*)
    + getUsername(): string
    + getPassword(): string
}

class AlertDialog {
    - messageCtrl: wxTextCtrl*
    --
    + AlertDialog(parent: wxWindow*, alert: Alert*)
    + showAlert()
}

' Map and Navigation Classes
class Map {
    - width: int
    - height: int
    - grid: vector<vector<bool>>
    - virtualWalls: vector<VirtualWall*>
    --
    + Map(width: int, height: int)
    + addVirtualWall(wall: VirtualWall*)
    + removeVirtualWall(wall: VirtualWall*)
    + isOccupied(x: int, y: int): bool
    + getWidth(): int
    + getHeight(): int
}

class VirtualWall {
    - startX: int
    - startY: int
    - endX: int
    - endY: int
    --
    + VirtualWall(startX: int, startY: int, endX: int, endY: int)
    + isBlocking(x: int, y: int): bool
    + getStart(): pair<int, int>
    + getEnd(): pair<int, int>
}

' Task Management Classes
class Scheduler {
    - tasks: vector<CleaningTask*>
    - robots: vector<Robot*>
    --
    + Scheduler()
    + addTask(task: CleaningTask*)
    + assignTask(robot: Robot*, task: CleaningTask*)
    + optimizeSchedule()
}

class Schedule {
    - robotId: string
    - taskId: string
    - startTime: time_t
    - duration: int
    --
    + Schedule(robotId: string, taskId: string)
    + getStartTime(): time_t
    + getDuration(): int
    + setStartTime(time: time_t)
    + setDuration(duration: int)
}

class CleaningTask {
    - taskId: string
    - roomId: string
    - priority: int
    - status: TaskStatus
    --
    + CleaningTask(taskId: string, roomId: string)
    + getPriority(): int
    + getStatus(): TaskStatus
    + setPriority(priority: int)
    + setStatus(status: TaskStatus)
}

class RobotSimulator {
    - robot: Robot*
    - map: Map*
    --
    + RobotSimulator(robot: Robot*, map: Map*)
    + simulateMovement()
    + simulateCleaning()
    + simulateBatteryDrain()
}

' Relationships
User "1" *-- "1" Role
Role "1" o-- "*" Permission
Alert "1" --> "1" Robot
Alert "1" --> "1" Room
AlertSystem "1" --> "*" Alert
MongoDBAdapter "1" --> "*" Alert
MongoDBAdapter "1" --> "*" Robot
Analytics "1" --> "*" RobotMetrics
AnalyticsService "1" --> "1" Analytics

Robot "1" --> "1" Map
Map "1" o-- "*" VirtualWall
RobotManagementFrame "1" --> "1" MapPanel
RobotManagementFrame "1" --> "*" Robot
MapPanel "1" --> "1" Map
MapPanel "1" --> "*" Robot

Scheduler "1" --> "*" CleaningTask
Scheduler "1" --> "*" Robot
Schedule "1" --> "1" Robot
Schedule "1" --> "1" CleaningTask
RobotSimulator "1" --> "1" Robot
RobotSimulator "1" --> "1" Map

@enduml